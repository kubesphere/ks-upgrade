storage:
  local:
    path: /tmp/ks-upgrade
validator:
  ksVersion:
    enabled: true
  extensionsMuseum:
    enabled: true
    namespace: kubesphere-system
    name: extensions-museum
    syncInterval: 0
    watchTimeout: 30m
jobs:
  core:
    enabled: true
    priority: 10000
  network:
    enabled: false
    priority: 100
    extensionRef:
      name: "network"
      version: "1.1.0"
    dynamicOptions: {
      "rerun": "false"
    }
  iam:
    enabled: true
    priority: 999
  devops:
    enabled: false
    priority: 800
    extensionRef:
      version: "1.1.2"
      installationMode: Multicluster
      clusterScheduling:
      config: |
        agent:
          jenkins:
            kubeconfigEnabled: true
            securityRealm:
              openIdConnect:
                # The kubesphere-core api used for jenkins OIDC
                # If want to access to jenkinsWebUI, the kubesphereCoreApi must be specified and browser-accessible
                # Modifying this configuration will take effect only during installation
                # If you wish for changes to take effect after installation, you need to update the jenkins-casc-config ConfigMapï¼Œcopy the securityRealm configuration from jenkins.yaml to jenkins_user.yaml, save, and wait for approximately 70 seconds for the changes to take effect.
                kubesphereCoreApi: "http://ks-apiserver:30880"
                # The jenkins web URL used for OIDC redirect
                # Modifying this configuration will take effect only during installation
                # If you wish for changes to take effect after installation, you need to update the devops-jenkins-oauthclient Secret
                jenkinsURL: "http://devops-jenkins:30180"
    dynamicOptions: {}
  storage-utils:
    enabled: false
    priority: 100
    extensionRef:
      name: "storage-utils"
      version: "1.0.0"
    dynamicOptions: {
      "rerun": "false"
    }
  tower:
    enabled: false
    priority: 100
    extensionRef:
      name: "tower"
      version: "1.0.0"
      config: |
        tower:
          service:
            create: false
  kubefed:
    enabled: false
    priority: 100
    extensionRef:
      name: "kubefed"
      version: "1.0.0"
  whizard-monitoring:
    enabled: false
    priority: 100
    extensionRef:
      name: "whizard-monitoring"
      version: "1.1.1"
    dynamicOptions:
      rerun: false
      updateCrds: true
  servicemesh:
    enabled: false
    priority: 90
    extensionRef:
      name: "servicemesh"
      version: "1.0.0"
  application:
    enabled: false
    priority: 100
    extensionRef:
      name: "openpitrix"
      version: "2.0.1"
  whizard-notification:
    enabled: false
    priority: 100
    extensionRef:
      name: "whizard-notification"
      version: "2.5.9"
      config: |
        notification-history:
          enabled: true
          vectorNamespace: kubesphere-logging-system
        
          sinks:
            opensearch:
              # Create opensearch sink or not
              enabled: false
              # The index to store the logs, will be {{ prefix }}-{{ timestring }}
              index:
                # The prefix of index, supports template syntax".
                prefix: "{{ .cluster }}-notification-history"
                # Timestring is parsed from strftime patterns, like %Y.%m.%d. Used to distribute logs into different indexes according to time.
                timestring: "%Y.%m.%d"
              # Configurations for the opensearch sink, more info for https://vector.dev/docs/reference/configuration/sinks/elasticsearch/
              # Usually users needn't change the following OpenSearch sink config, and the default sinks in secret "kubesphere-logging-system/vector-sinks" created by the WhizardTelemetry Data Pipeline extension will be used.
              metadata:
                api_version: v8
                auth:
                  strategy: basic
                  user: admin
                  password: admin
                batch:
                  timeout_secs: 5
                buffer:
                  max_events: 10000
                endpoints:
                  - https://opensearch-cluster-data.kubesphere-logging-system.svc:9200
                tls:
                  verify_certificate: false
  whizard-alerting:
    enabled: false
    priority: 10
    extensionRef:
      name: "whizard-alerting"
      version: "1.0.3"
    dynamicOptions:
      rerun: false
      updateCrds: true
  kubeedge:
    enabled: false
    priority: 100
    extensionRef:
      name: "kubeedge"
      version: "1.13.1"
    dynamicOptions: {
      "rerun": "false"
    }
  whizard-events:
    enabled: false
    priority: 100
    extensionRef:
      name: "whizard-events"
      version: "1.2.0"
      config: |
        kube-events-exporter:
          sinks:
            opensearch:
              # Create opensearch sink or not
              enabled: false
              # The index to store the logs, will be {{ prefix }}-{{ timestring }}
              index:
                # The prefix of index, supports template syntax.
                prefix: "{{ .cluster }}-events"
                # Timestring is parsed from strftime patterns, like %Y.%m.%d. Used to distribute logs into different indexes according to time.
                timestring: "%Y.%m.%d"
              # Configurations for the opensearch sink, more info for https://vector.dev/docs/reference/configuration/sinks/elasticsearch/
              # Usually users needn't change the following OpenSearch sink config, and the default sinks in secret "kubesphere-logging-system/vector-sinks" created by the WhizardTelemetry Data Pipeline extension will be used.
              metadata:
                api_version: v8
                auth:
                  strategy: basic
                  user: admin
                  password: admin
                batch:
                  timeout_secs: 5
                buffer:
                  max_events: 10000
                endpoints:
                  - https://opensearch-cluster-data.kubesphere-logging-system.svc:9200
                tls:
                  verify_certificate: false
  gateway:
    enabled: false
    priority: 90
    extensionRef:
      name: "gateway"
      version: "1.0.2"
  whizard-logging:
    enabled: false
    priority: 100
    extensionRef:
      name: "whizard-logging"
      version: "1.2.2"
      config: |
        vector-logging:        
          sinks:
            opensearch:
              # Create opensearch sink or not
              enabled: false
              # The index to store the logs, will be {{ prefix }}-{{ timestring }}
              index:
                # The prefix of index, supports template syntax.
                prefix: "{{ .cluster }}-logs"
                # Timestring is parsed from strftime patterns, like %Y.%m.%d. Used to distribute logs into different indexes according to time.
                timestring: "%Y.%m.%d"
              # Configurations for the opensearch sink, more info for https://vector.dev/docs/reference/configuration/sinks/elasticsearch/
              # Usually users needn't change the following OpenSearch sink config, and the default sinks in secret "kubesphere-logging-system/vector-sinks" created by the WhizardTelemetry Data Pipeline extension will be used.
              metadata:
                api_version: v8
                auth:
                  strategy: basic
                  user: admin
                  password: admin
                batch:
                  timeout_secs: 5
                buffer:
                  max_events: 10000
                endpoints:
                  - https://opensearch-cluster-data.kubesphere-logging-system.svc:9200
                tls:
                  verify_certificate: false
  vector:
    enabled: false
    priority: 101
    extensionRef:
      name: "vector"
      version: "1.0.4"
  opensearch:
    enabled: false
    priority: 100
    extensionRef:
      name: "opensearch"
      version: "2.11.1"
  whizard-telemetry:
    enabled: false
    priority: 100
    extensionRef:
      name: "whizard-telemetry"
      version: "1.2.2"
  metrics-server:
    enabled: false
    priority: 80
    extensionRef:
      name: "metrics-server"
      version: "0.7.1"
    dynamicOptions: {
      "rerun": "false"
    }